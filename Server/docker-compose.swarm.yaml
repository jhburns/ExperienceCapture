---
version: '3.5'

services:
  api:
    image: 127.0.0.1:5000/ec-api
    deploy:
      restart_policy:
        condition: any
      replicas: 4
      update_config:
        parallelism: 0
        delay: 30s
    volumes:
      - ./API/appsettings.production.json:/app/appsettings.js
    environment:
      - exporter_image_name=127.0.0.1:5000/ec-exporter
    healthcheck:
      test: wget --quiet --tries=1 -O /dev/null http://localhost/health/ || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3

  web:
    build:
      context: ./WebUI
      dockerfile: integration.Dockerfile
    command: "caddy"
    image: 127.0.0.1:5000/ec-web
    deploy:
      restart_policy:
        condition: any
      replicas: 3
      update_config:
        parallelism: 0
        delay: 30s
    ports:
      - "2015:2015"
    healthcheck:
      test: wget --quiet --tries=1 -O /dev/null http://localhost:2015/ || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3

  exporter:
    image: 127.0.0.1:5000/ec-exporter

  rp:
    command: ["--agree", "-ca", "https://acme-staging-v02.api.letsencrypt.org/directory"]
    deploy:
      restart_policy:
        condition: any
      replicas: 3
      update_config:
        parallelism: 0
        delay: 30s
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddy/production.Caddyfile:/etc/Caddyfile
      - ec-rp-volume:/etc/caddycerts
    environment:
      - CADDYPATH=/etc/caddycerts
      - HOME=/etc/caddycerts
    env_file:
      - .env
      # Warning: Do not try to add a healthcheck here because as it will stop Let's Encrypt from working

  db:
    deploy:
      restart_policy:
        condition: any
      update_config:
        parallelism: 0
        delay: 30s
    healthcheck:
      test: mongo --quiet --eval "db.adminCommand('ping')"
      interval: 1m30s
      timeout: 10s
      retries: 3

  os:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 1m30s
      timeout: 10s
      retries: 3

  bu:
    image: 127.0.0.1:5000/ec-bu
    deploy:
      mode: global
      labels:
        - "swarm.cronjob.enable=true"
        - "swarm.cronjob.schedule=0 2 * * *"  # Every day at 2AM
        - "swarm.cronjob.skip-running=true"
      restart_policy:
        condition: none

networks:
  ec-network:
    driver: overlay
    attachable: true
