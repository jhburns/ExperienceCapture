---
- hosts: all
  become: true
  gather_facts: false

  vars:
    rexray_access_id: "{{ lookup('env','aws_rexray_access_id') }}"
    rexray_secret_key: "{{ lookup('env','aws_rexray_secret_key') }}"
    aws_region_name: "{{ lookup('env','aws_region_name') }}"
    packer_debug: "{{ lookup('env','packer_debug_option') }}"
    aws_target: "{{ lookup('env','aws_deploy_target') }}"

  tasks:

    # Needed because the Ubuntu AMI does not come with python2
    - name: symlink /usr/bin/python -> /usr/bin/python3
      raw: |
           if [ -f /usr/bin/python3 ] && [ ! -f /usr/bin/python ]; then
             ln --symbolic /usr/bin/python3 /usr/bin/python;
           fi

    - name: Update cache before installing packages
      apt:
        update_cache: true

    - name: Add 'fish' repository
      apt_repository:
        repo: ppa:fish-shell/release-3

    - name: Install required system packages for Docker
      apt:
        update_cache: true
        name: "{{ item }}"
      loop:
        - 'apt-transport-https=1.6.6ubuntu0.1'
        - 'ca-certificates=20180409'
        - 'curl=7.58.0-2ubuntu3.8'
        - 'software-properties-common=0.96.24.32.11'
        - 'rsync=3.1.2-2.1ubuntu1'
        - 'fish=3.0.2-1~bionic'

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable

    - name: Update apt and install docker-ce
      apt:
        update_cache: true
        name: docker-ce=5:19.03.5~3-0~ubuntu-bionic

    - name: Copy Server files over
      synchronize:
        src: /deploy/Server/
        dest: /srv
        rsync_opts:
          - "{% if packer_debug == 'true' %}--chmod=F666{% else %}--chmod=F444{% endif %}"

    - name: Start Docker Swarm
      command: docker swarm init

    - name: Create Docker registry service
      command: docker stack deploy -c ./infrastructure/docker-compose.early.yaml infra
      args:
        chdir: /srv

    - name: Download and install docker-compose
      shell: curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      args:
        warn: false

    - name: Change file ownership, group and permissions
      file:
        path: /usr/local/bin/docker-compose
        mode: u=rwx,g=rx,o=rx

    - name: Add the user 'ec-debug' as part of the 'docker' group
      user:
        name: ec-debug
        comment: Default user for debugging in production.
        group: docker
        shell: /usr/bin/fish
        password_lock: true
      when: packer_debug == 'true'

    - name: Download the REX-Ray plugin
      command: "docker plugin install rexray/ebs:0.11.4 \
               --grant-all-permissions \
              EBS_ACCESSKEY={{ rexray_access_id }} \
              EBS_SECRETKEY={{ rexray_secret_key }} \
              EBS_REGION={{ aws_region_name }}"

    - name: Allow all access from RFC1918 networks to this host
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.protocol }}"
      with_items:
        - {port: "80", protocol: "tcp"}
        - {port: "443", protocol: "tcp"}
        - {port: "2377", protocol: "tcp"}
        - {port: "7946", protocol: "tcp"}
        - {port: "7946", protocol: "udp"}
        - {port: "4789", protocol: "udp"}

    - name: Set authorized key
      authorized_key:
        user: ec-debug
        state: present
        key: "{{ lookup('file', './id_rsa.pub') }}"
      when: packer_debug == 'true'

    - name: Rebuild Docker images for production
      command: docker-compose -f docker-compose.yaml -f docker-compose.swarm.yaml build --parallel
      args:
        chdir: /srv

    - name: Waits for registry to become available
      wait_for:
        host: 0.0.0.0
        port: 5000
        delay: 1
        timeout: 5

    - name: Pushes Docker images to local registry
      command: docker-compose -f docker-compose.yaml -f docker-compose.swarm.yaml push
      args:
        chdir: /srv

    - name: Prune non-production Docker images so the AMI uses less space
      command: docker system prune --all --force

    - name: Create other infrastructure services
      command: docker stack deploy -c ./infrastructure/docker-compose.early.yaml -c ./infrastructure/docker-compose.middle.yaml infra
      args:
        chdir: /srv

    # Waits so that that services don't start before the instance is stopped
    - name: Create production Docker Swarm services
      at:
        command: cd /srv && docker stack deploy -c docker-compose.yaml -c docker-compose.swarm.yaml -c docker-compose.swarm.production.yaml ec
        count: 2
        units: minutes
      register: result
      when: aws_target == 'production'

    - name: Create staging Docker Swarm services
      at:
        command: cd /srv && docker stack deploy -c docker-compose.yaml -c docker-compose.swarm.yaml -c docker-compose.swarm.staging.yaml ec
        count: 2
        units: minutes
      when: result is skipped